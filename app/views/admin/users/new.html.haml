.govuk-grid-row
  .govuk-grid-column-two-thirds
    %noscript
      .govuk-warning-text
        %span.govuk-warning-text__icon{"aria-hidden" => "true"} !
        %strong.govuk-warning-text__text
          %span.govuk-visually-hidden Warning
          You have javascript disabled. You can still create a user, however you will need to provide supplier salesforce ID(s) in the field below, and please note supplier searches will refresh the page.
        
    = simple_form_for [:admin, @user] do |form|
      %fieldset.govuk-fieldset
        %legend.govuk-fieldset__legend.govuk-fieldset__legend--xl
          %h1.govuk-fieldset__heading
            Add a new user

        = render partial: 'shared/error_summary', locals: { entity: @user } if @user.errors.present?

        = form.input :name
        = form.input :email
        
        %p Supplier(s)
        #selected-suppliers.govuk-body

        %noscript
          .govuk-form-group
            #salesforce-ids-hint.govuk-hint
              Supplier salesforce ID(s) - please separate with commas
            %input#salesforce-ids.govuk-input{"aria-describedby" => "salesforce-ids-hint", name: "supplier_salesforce_ids[]", type: "text"}
        
        = form.button :submit, value: 'Add new user'

%hr.govuk-section-break.govuk-section-break--m.govuk-section-break--visible/

.govuk-grid-row
  .govuk-grid-column-two-thirds
    = form_tag(new_admin_user_path, method: :get, enforce_utf8: false, remote: :true, id: 'supplier-search-form') do
      %h2.govuk-heading-s
        Search suppliers
      .ccs-search-form-group
        %label.govuk-label.govuk-visually-hidden{ for: 'search' } Search
        %input#search{ name: 'search', type: 'text', value: params[:search], class: ['govuk-!-width-two-thirds', 'govuk-input'] }
        %button.govuk-button{ type: 'submit' } Search

      .results{id: 'suppliers-list'}= render 'supplier_list', suppliers: @suppliers

:javascript
  document.addEventListener('DOMContentLoaded', () => {
    const supplierList = document.getElementById('suppliers-list');
    const selectedSuppliersDisplay = document.getElementById('selected-suppliers');

    let selectedSuppliers = {};

    function updateSelectedSuppliersDisplay() {
      if (!selectedSuppliersDisplay) return;

      const selectedNames = Object.values(selectedSuppliers);

      selectedSuppliersDisplay.innerHTML = selectedNames.length
        ? selectedNames.map(name => `${name}`).join('<br>')
        : '<p>Please select at least one supplier below</p>';
    }

    if (selectedSuppliersDisplay) {
      fetch('/admin/users/update_selected_suppliers', {
        method: 'GET',
        credentials: 'same-origin',
        headers: {
          'Content-Type': 'application/json',
          'X-CSRF-Token': document.querySelector('meta[name="csrf-token"]').content
        }
      })
      .then(response => response.json())
      .then(data => {
        console.log("Fetched selected suppliers:", data.selected_suppliers);
        if (!data.selected_suppliers || Object.keys(data.selected_suppliers).length === 0) {
          selectedSuppliers = {};
          document.querySelectorAll('.govuk-checkboxes__input').forEach(checkbox => checkbox.checked = false);
        } else {
          selectedSuppliers = data.selected_suppliers;
        }
        updateSelectedSuppliersDisplay();
      })
      .catch(error => console.error("Error fetching selected suppliers:", error));
    }

    if (supplierList) {
      supplierList.addEventListener('change', (event) => {
        if (event.target.classList.contains('govuk-checkboxes__input')) {
          const supplierId = event.target.value;
          console.log(supplierId);
          const isChecked = event.target.checked;
          console.log(isChecked);
          const supplierName = event.target.closest('tr').querySelector('.govuk-checkboxes__label').textContent.trim();

          if (isChecked) {
            selectedSuppliers[supplierId] = supplierName;
          } else {
            delete selectedSuppliers[supplierId];
          }

          fetch('/admin/users/update_selected_suppliers', {
            method: 'POST',
            headers: {
              'Content-Type': 'application/json',
              'X-CSRF-Token': document.querySelector('meta[name="csrf-token"]').content
            },
            body: JSON.stringify({ supplier_id: supplierId, supplier_name: supplierName, checked: isChecked })
          }).then(response => response.json())
            .then(data => {
              console.log("Updated Selected Suppliers:", data.selected_suppliers);
              selectedSuppliers = data.selected_suppliers || {};
              updateSelectedSuppliersDisplay();
              })
            .catch(error => console.error("Error updating selection:", error));
        }
      });
    } 
  });

  window.addEventListener('pageshow', (event) => {
    if (event.persisted) {
      console.log("Navigated back - forcing full reload");
      window.location.reload();
    }
  });
  
  window.addEventListener('beforeunload', () => {
    fetch('/admin/users/reset_selected_suppliers', {
      method: 'POST',
      credentials: 'same-origin',
      headers: {
          'Content-Type': 'application/json',
          'X-CSRF-Token': document.querySelector('meta[name="csrf-token"]').content
        }
    });
  });
